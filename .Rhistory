legend.key.size = unit(.5, "cm"),
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.text.x = element_text(size = 6, face = "bold", margin = margin(t=1)),
axis.text.y = element_text(size = 6, face = "bold"),
axis.title.y = element_text(size = 8, margin = margin(l=2)),
axis.ticks.x = element_blank(),
plot.caption = element_text(hjust = 0, size = 7),
plot.title = element_text(margin = margin(b = 20),size = 9)
)
global_climate_data <- world_data %>%
filter(year > 1990) %>%
select(country, date, year,
contains(match = "emision", ignore.case = T)) %>%
mutate(CO2_emisions = CO2_emisions/1e6,
other_greenhouse_emisions = other_greenhouse_emisions/1e6) %>%
drop_na()
(co2_plot <- global_climate_data %>%
{
ggplot(.,aes(x = year, y = CO2_emisions))+
geom_line(na.rm = TRUE, color = "#006BA2", linewidth = 1.5)+
geom_area(na.rm = TRUE, fill = "#7ad2f6", alpha = 0.4)+
#geom_hline(yintercept = 21.39, color = "#014d64", linetype = "dashed")+
#Kyoto Protocol 1997
geom_vline(xintercept = 1997, linetype = "dashed", color = "#014d64")+
annotate("label", x = 1997, y = 36.5, label = "Kyoto Protocol\nDec 1997", size = 3)+
#IPCC 4th Report 2007
geom_vline(xintercept = 2007, linetype = "dashed", color = "#014d64")+
annotate(geom = "label", x = 2007, y = 36.5, label = "IPCC 4th Report", size = 3)+
#Paris Agreement 2015
geom_vline(xintercept = 2015, linetype = "dashed", color = "#014d64")+
annotate(geom = "label", x = 2015, y = 36.5, label = "Paris Agreement\nDec 2015", size = 3)+
scale_x_continuous(breaks = seq(1991,2020,1), labels =  seq(1991,2020,1))+
scale_y_continuous(expand = c(0,0),
breaks = seq(0,40,5), labels = seq(0,40,5))+
labs(title = "Carbon dioxide emissions in kt (1991-2020)",
#subtitle = "mass in kt(kiloton)",
caption = "Source: World Bank",
x = "",
y = "mass in kt")+
coord_cartesian(clip = "off")+
common_theme+
theme(axis.ticks.length.x.bottom = unit(0.1, units = "cm"),
axis.text.x = element_text(angle = 90, size = 6, margin = margin(t=1.5), face = "bold"),
axis.text.y = element_text(size = 6, face = "bold"),
axis.title.y = element_text(margin = margin(r=10), size = 7),
panel.grid.major.y = element_line(linewidth = 0.3),
plot.caption = element_text(hjust = 0, size = 7),
plot.title = element_text(margin = margin(b = 30), hjust = 0.5))
}
)
(ghg_plot <- global_climate_data %>%
{
ggplot(.,aes(x = year, y = other_greenhouse_emisions))+
geom_line(na.rm = TRUE, color = "#006BA2", linewidth = 1.5)+
geom_area(na.rm = TRUE, fill = "#7ad2f6", alpha = 0.4)+
#geom_hline(yintercept = 21.39, color = "#014d64", linetype = "dashed")+
#Kyoto Protocol 1997
geom_vline(xintercept = 1997, linetype = "dashed", color = "#014d64")+
annotate("label", x = 1997, y = 51, label = "Kyoto Protocol\nDec 1997", size = 3)+
#IPCC 4th Report 2007
geom_vline(xintercept = 2007, linetype = "dashed", color = "#014d64")+
annotate(geom = "label", x = 2007, y = 51, label = "IPCC 4th Report", size = 3)+
#Paris Agreement 2015
geom_vline(xintercept = 2015, linetype = "dashed", color = "#014d64")+
annotate(geom = "label", x = 2015, y = 51, label = "Paris Agreement\nDec 2015", size = 3)+
scale_x_continuous(breaks = seq(1991,2020,1), labels =  seq(1991,2020,1))+
scale_y_continuous(expand = c(0,0),
breaks = seq(0,55,5), labels = seq(0,55,5))+
labs(title = "Greenhouse gas emission in kt (1991-2000)",
caption = "Source: World Bank",
x = "",
y = "mass in kt(kiloton)")+
coord_cartesian(clip = "off")+
common_theme+
theme(axis.ticks.length.x.bottom = unit(0.1, units = "cm"),
axis.text.x = element_text(angle = 90, size = 6, face = "bold", margin = margin(t=1.5)),
axis.text.y = element_text(size = 6, face = "bold"),
axis.title.y = element_text(margin = margin(r=10), size = 7),
panel.grid.major.y = element_line(linewidth = 0.3),
plot.caption = element_text(hjust = 0, size = 7),
plot.title = element_text(margin = margin(b = 30), hjust = 0.5))
}
)
(co2_plot <- global_climate_data %>%
{
ggplot(.,aes(x = year, y = CO2_emisions))+
geom_line(na.rm = TRUE, color = "#006BA2", linewidth = 1.5)+
geom_area(na.rm = TRUE, fill = "#7ad2f6", alpha = 0.4)+
#geom_hline(yintercept = 21.39, color = "#014d64", linetype = "dashed")+
#Kyoto Protocol 1997
geom_vline(xintercept = 1997, linetype = "dashed", color = "#014d64")+
annotate("label", x = 1997, y = 36.5, label = "Kyoto Protocol\nDec 1997", size = 3)+
#IPCC 4th Report 2007
geom_vline(xintercept = 2007, linetype = "dashed", color = "#014d64")+
annotate(geom = "label", x = 2007, y = 36.5, label = "IPCC 4th Report", size = 3)+
#Paris Agreement 2015
geom_vline(xintercept = 2015, linetype = "dashed", color = "#014d64")+
annotate(geom = "label", x = 2015, y = 36.5, label = "Paris Agreement\nDec 2015", size = 3)+
scale_x_continuous(breaks = seq(1991,2020,1), labels =  seq(1991,2020,1))+
scale_y_continuous(expand = c(0,0),
breaks = seq(0,40,5), labels = seq(0,40,5))+
labs(title = "Carbon dioxide emissions in kt (1991-2020)",
#subtitle = "mass in kt(kiloton)",
caption = "Source: World Bank",
x = "",
y = "mass in kt")+
coord_cartesian(clip = "off")+
common_theme+
theme(axis.ticks.length.x.bottom = unit(0.1, units = "cm"),
axis.text.x = element_text(angle = 90, size = 6, margin = margin(t=1.5), face = "bold"),
axis.text.y = element_text(size = 6, face = "bold"),
axis.title.y = element_text(margin = margin(r=10), size = 7),
panel.grid.major.y = element_line(linewidth = 0.3),
plot.caption = element_text(hjust = 0, size = 7),
plot.title = element_text(margin = margin(b = 30), hjust = 0.5))
}
)
ggsave(filename = "co2_emissions.png")
(6000*.9)-61
5339*81
432459-300000
132459-27000-25000-9000-2000-25000
15000*.9
13500-152
13348*81
1081188-540000-27000-25000-9000-2000-35000
443188-50000-100000
293188-100000
getwd()
library(tidyverse)
readLines("https://drive.google.com/file/d/1jb9iK0Mb4NEhvhvb0XEMXG-FSqSeWj1u/view",
n = 10)
readLines("https://drive.google.com/file/d/1jb9iK0Mb4NEhvhvb0XEMXG-FSqSeWj1u",
n = 10)
knitr::opts_chunk$set(echo = TRUE)
#display only character columns
glimpse(sf_data %>% select(where(is.character))) #21 columns
library(tidyverse)
library(janitor)
library(readxl)
library(writexl)
#data folder
data_path <- paste0(getwd(),"/sf_building_data")
#image folder path to save images
img_path <- paste0(getwd(),"/images/")
#read csv file
sf_data <- readr::read_csv(paste0(data_path, "/Building_Permits.csv"))
#make column names uniform
sf_data <- janitor::clean_names(sf_data)
#Display the number of missing values stats as in column form
na_count <-sapply(sf_data, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
na_count <- tibble::rownames_to_column(na_count, "column_name")
#add a column with percentage of NA values in each column
na_count$percent_blank_rows <- round((na_count$na_count/nrow(sf_data))*100,1)
#glimpse at missing count dataframe
head(na_count %>% arrange(-na_count))
#filter all columns with more than 80% blank rows
na_count %>% filter(percent_blank_rows > 80)
#REmove columns which have more than 80% NA values
sf_data <- sf_data %>% select(-c(street_number_suffix, #98.9% blank
unit, #85.2% blank
unit_suffix, #99% blank
structural_notification, #96.5% blank
voluntary_soft_story_retrofit, #100%
fire_only_permit, #90.5%
tidf_compliance, #100%
site_permit) #97.3% blank
)#select
##filter columns with more than 50% and less than 80% blank rows
#Only 1, completed date: 51.1% blank rows
na_count %>% filter(percent_blank_rows>=50 & percent_blank_rows<=80)
#display only character columns
glimpse(sf_data %>% select(where(is.character))) #21 columns
#display only float-type columns
glimpse(sf_data %>% select(where(is.double))) #14 columns
#subset of only date columns
date_columns <- sf_data %>% select(contains("date"))
dates_separators <- date_columns %>%
mutate(across(everything(),
~str_detect(.,
pattern = "[^0-9]")))
View(dates_separators)
dates_separators <- date_columns %>%
mutate(across(everything(),
~str_extract_all(.,
pattern = "[^0-9]")))
unique(dates_separators)
View(dates_separators)
dates_separators <- date_columns %>%
filter(across(everything(),
~is.na(.))) %>%
mutate(across(everything(),
~str_extract_all(.,
pattern = "[^0-9]")))
?if_any
dates_separators <- date_columns %>%
filter(everything(), is.na) %>%
mutate(across(everything(),
~str_extract_all(.,
pattern = "[^0-9]")))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(readxl)
library(writexl)
#data folder
data_path <- paste0(getwd(),"/sf_building_data")
#image folder path to save images
img_path <- paste0(getwd(),"/images/")
#read csv file
sf_data <- readr::read_csv(paste0(data_path, "/Building_Permits.csv"))
#make column names uniform
sf_data <- janitor::clean_names(sf_data)
#Display the number of missing values stats as in column form
na_count <-sapply(sf_data, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
na_count <- tibble::rownames_to_column(na_count, "column_name")
#add a column with percentage of NA values in each column
na_count$percent_blank_rows <- round((na_count$na_count/nrow(sf_data))*100,1)
#glimpse at missing count dataframe
head(na_count %>% arrange(-na_count))
#filter all columns with more than 80% blank rows
na_count %>% filter(percent_blank_rows > 80)
#REmove columns which have more than 80% NA values
sf_data <- sf_data %>% select(-c(street_number_suffix, #98.9% blank
unit, #85.2% blank
unit_suffix, #99% blank
structural_notification, #96.5% blank
voluntary_soft_story_retrofit, #100%
fire_only_permit, #90.5%
tidf_compliance, #100%
site_permit) #97.3% blank
)#select
##filter columns with more than 50% and less than 80% blank rows
#Only 1, completed date: 51.1% blank rows
na_count %>% filter(percent_blank_rows>=50 & percent_blank_rows<=80)
#No duplicate rows
sum(duplicated(sf_data)) # 0
#Check whether data type of column matches with the type of values
dplyr::glimpse(sf_data)
#display only character columns
glimpse(sf_data %>% select(where(is.character))) #21 columns
#display only float-type columns
glimpse(sf_data %>% select(where(is.double))) #14 columns
#subset of only date columns
date_columns <- sf_data %>% select(contains("date"))
dates_separators <- date_columns %>%
na.exclude() %>%
mutate(across(everything(),
~str_extract_all(.,
pattern = "[^0-9]")))
unique(dates_separators)
View(dates_separators)
#check for the pattern- 2 digits/2 digits/4 digits in all dates column
dates_correct_format <- date_columns %>%
mutate(across(everything(),
~str_detect(.,
pattern = "\\d{2}/\\d{2}/\\d{4}"
)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(readxl)
library(writexl)
#data folder
data_path <- paste0(getwd(),"/sf_building_data")
#image folder path to save images
img_path <- paste0(getwd(),"/images/")
#read csv file
sf_data <- readr::read_csv(paste0(data_path, "/Building_Permits.csv"))
#make column names uniform
sf_data <- janitor::clean_names(sf_data)
#Display the number of missing values stats as in column form
na_count <-sapply(sf_data, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
na_count <- tibble::rownames_to_column(na_count, "column_name")
#add a column with percentage of NA values in each column
na_count$percent_blank_rows <- round((na_count$na_count/nrow(sf_data))*100,1)
#glimpse at missing count dataframe
head(na_count %>% arrange(-na_count))
#filter all columns with more than 80% blank rows
na_count %>% filter(percent_blank_rows > 80)
#REmove columns which have more than 80% NA values
sf_data <- sf_data %>% select(-c(street_number_suffix, #98.9% blank
unit, #85.2% blank
unit_suffix, #99% blank
structural_notification, #96.5% blank
voluntary_soft_story_retrofit, #100%
fire_only_permit, #90.5%
tidf_compliance, #100%
site_permit) #97.3% blank
)#select
##filter columns with more than 50% and less than 80% blank rows
#Only 1, completed date: 51.1% blank rows
na_count %>% filter(percent_blank_rows>=50 & percent_blank_rows<=80)
#No duplicate rows
sum(duplicated(sf_data)) # 0
#Check whether data type of column matches with the type of values
dplyr::glimpse(sf_data)
#display only character columns
glimpse(sf_data %>% select(where(is.character))) #21 columns
#display only float-type columns
glimpse(sf_data %>% select(where(is.double))) #14 columns
#subset of only date columns
date_columns <- sf_data %>% select(contains("date"))
dates_separators <- date_columns %>%
na.exclude() %>%
mutate(across(everything(),
~str_extract_all(.,
pattern = "[^0-9]")))
#check for the pattern- 2 digits/2 digits/4 digits in all dates column
dates_correct_format <- date_columns %>%
#remove NA values
filter(everything(), ~is.na) %>%
mutate(across(everything(),
~str_detect(.,
pattern = "\\d{2}/\\d{2}/\\d{4}"
)))
#check for the pattern- 2 digits/2 digits/4 digits in all dates column
dates_correct_format <- date_columns %>%
#remove NA values
filter(if_any(everything(), ~is.na)) %>%
mutate(across(everything(),
~str_detect(.,
pattern = "\\d{2}/\\d{2}/\\d{4}"
)))
#check for the pattern- 2 digits/2 digits/4 digits in all dates column
dates_correct_format <- date_columns %>%
#remove NA values
drop_na() %>%
mutate(across(everything(),
~str_detect(.,
pattern = "\\d{2}/\\d{2}/\\d{4}"
)))
any(dates_correct_format)
all(dates_correct_format)
#check for the pattern- 2 digits/2 digits/4 digits in all dates column
dates_correct_format <- date_columns %>%
#remove NA values
drop_na() %>%
mutate(across(everything(),
~str_detect(.,
pattern = "\\d{2}/\\d{2}/\\d{4}"
)))
#check whether any value returns false, i.e. pattern above not found
all(dates_correct_format) #All True
#checking number of false values in each date column--None
false_date_formats <- colSums(!dates_correct_format, na.rm = T)
false_date_formats
version
# Load the necessary libraries
library(tidyverse)
# Create the data frame
data <- tibble(
Reason = c("Price + reputation (trust) + coverage",
"Price + reputation (trust) + specific clauses + support",
"Price + coverage + support",
"Price",
"Price + coverage",
"Price + coverage + specific clauses",
"Reputation (trust)",
"Price + reputation (trust) + support",
"Price + reputation (trust) + coverage + support",
"Price + reputation (trust) + coverage + specific clauses"),
Value = c(30, 22, 21, 20, 18, 15, 13, 13, 13, 9)
)
# Create the plot
ggplot(data, aes(x = reorder(Reason, Value), y = Value)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Buying Reasons",
subtitle = "Add subtitle",
x = NULL,
y = NULL,
caption = "Source: add source"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 0)
)
# Load the necessary libraries
library(tidyverse)
# Create the data frame
data <- tibble(
Reason = c("Price + reputation (trust) + coverage",
"Price + reputation (trust) + specific clauses + support",
"Price + coverage + support",
"Price",
"Price + coverage",
"Price + coverage + specific clauses",
"Reputation (trust)",
"Price + reputation (trust) + support",
"Price + reputation (trust) + coverage + support",
"Price + reputation (trust) + coverage + specific clauses"),
Value = c(30, 22, 21, 20, 18, 15, 13, 13, 13, 9)
)
# Create the plot
ggplot(data, aes(x = reorder(Reason, Value), y = Value)) +
geom_col(fill = "steelblue", width = 0.7) + # Adjust the width of the bars
coord_flip() +
labs(
title = "Buying Reasons",
subtitle = "Add subtitle",
x = NULL,
y = NULL,
caption = "Source: add source"
) +
theme_minimal(base_size = 15) +
theme(
plot.background = element_rect(fill = "#cbe7f3", color = NA), # Set the background color
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.text.x = element_text(margin = margin(t = 5)),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 0),
axis.text.y = element_text(size = 10, hjust = 1) # Compact the y-axis text
)
# Load the necessary libraries
library(tidyverse)
# Create the data frame
data <- tibble(
Reason = c("Price + reputation (trust) + coverage",
"Price + reputation (trust) + specific clauses + support",
"Price + coverage + support",
"Price",
"Price + coverage",
"Price + coverage + specific clauses",
"Reputation (trust)",
"Price + reputation (trust) + support",
"Price + reputation (trust) + coverage + support",
"Price + reputation (trust) + coverage + specific clauses"),
Value = c(30, 22, 21, 20, 18, 15, 13, 13, 13, 9)
)
# Create the plot
ggplot(data, aes(x = reorder(Reason, Value), y = Value)) +
geom_col(fill = "steelblue", width = 0.6) + # Adjust the width of the bars
coord_flip() +
labs(
title = "Buying Reasons",
subtitle = "Add subtitle",
x = NULL,
y = NULL,
caption = "Source: add source"
) +
theme_minimal(base_size = 15) +
theme(
plot.background = element_rect(fill = "#cbe7f3", color = NA), # Set the background color
panel.background = element_rect(fill = "#cbe7f3", color = NA), # Set the panel background color
panel.grid.major.x = element_blank(), # Remove major grid lines
panel.grid.minor.x = element_blank(), # Remove minor grid lines
panel.grid.major.y = element_line(color = "gray80"), # Keep horizontal grid lines
axis.text.x = element_text(margin = margin(t = 5)),
axis.text.y = element_text(size = 10, hjust = 1, margin = margin(r = -10)), # Compact the y-axis text
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 0)
)
library(rmarkdown)
rmarkdown::render(C:/Users/shefa/Desktop/Upwork 2024/Upwork_Christoph_V/forcasting_project/June20_cloudiness_surface_temp_correlation_graph/mean_correlation_graph.R)
rmarkdown::render(C:/Users/shefa/Desktop/Upwork 2024/Upwork_Christoph_V/forcasting_project/June20_cloudiness_surface_temp_correlation_graph/mean_correlation_graph.R)
rmarkdown::render(C:\Users/shefa/Desktop/Upwork 2024/Upwork_Christoph_V/forcasting_project/June20_cloudiness_surface_temp_correlation_graph/mean_correlation_graph.R)
rmarkdown::render(mean_correlation_graph.R)
rmarkdown::render('C:\Users/shefa/Desktop/Upwork 2024/Upwork_Christoph_V/forcasting_project/June20_cloudiness_surface_temp_correlation_graph/mean_correlation_graph.R')
library(tidyverse)
ggplot(mtcars, aes(x=mpg, y=wt))+
geom_point()
text <- "</p> welcome home, <strong> shefali</strong> great </p>"
gsub(pattern = "<.*>", replacement = "", text)
gsub(pattern = "<.*?>", replacement = "", text)
trimws(gsub(pattern = "<.*?>", replacement = "", text))
text <- "</p> welcome home, <strong> shefali</strong></p>"
gsub(pattern = "<.*>", replacement = "", text)
gsub(pattern = "<.*?>", replacement = "", text)
trimws(gsub(pattern = "<.*?>", replacement = "", text))
text2 <- "shefali   is great  at sports "
text2 <- "shefali   is great  at sports .  "
trimws(text2)
gsub(pattern = "\\s", replacement = "", text2)
gsub(pattern = "\\s+", replacement = "", text2)
gsub(pattern = "\\s{2,}", replacement = "", text2)
gsub(pattern = "\\s+(?=\\s)\\s+", replacement = "", text2)
gsub(pattern = "\\s+", replacement = " ", text2)
text3 <- gsub(pattern = "\\s+", replacement = " ", text2)
text3
text3 <- trimws(text3)
text3
text4 <- gsub("\\s+\\.$", "", text3)
text4
text4 <- gsub("\\s+(?=\\.)$", "", text3)
text4 <- gsub("\\s+(?<=\\.)$", "", text3)
text4 <- gsub("[a-zA-Z0-9]+\\s+(?<=\\.)$", "", text3)
text4 <- gsub("\\s+(?<=\\.)$", "", text3, perl = T)
text4
text4 <- gsub("(?=[a-zA-Z0-9])\\s+(?<=\\.)$", "", text3, perl = T)
text4
text4 <- gsub("(?=[a-zA-Z0-9])\\s+(?<=\\.)$", ".", text3, perl = T)
text4
text4 <- gsub("\\s+\\.", ".", text3)
text4
getwd()
setwd("C:/Users/shefa/Desktop/Github/Data-Analysis-And-Viz-R")
getw
get()
getwd()
setwd("C:\Users\shefa\Desktop\Github\data-cleaning-projects")
setwd("C:/Users/shefa/Desktop/Github/data-cleaning-projects")
